* Haskell notes

** DONE Day7
   CLOSED: [2021-08-17 Tue 19:41]
   There is a lot of needless complexity and my solution is unclear.
   - I should try to use input parser as a separate function rather than linking it to the ~Read~ class. Here I had to make ~Con~ a data type when a ~type Con = Map String ConIn~ would have sufficed.
   - The recursion is non-trivial, ~evalCon~ ->  ~evalWire~ -> ~eval~ -> ~evalCon~. It could be simpler.
   - Must try reader and state monads and see how that solution compares to this.
     
** Day8

** DONE Day10
   CLOSED: [2021-09-29 Wed 12:30]
   Pretty straightforward implementation. 

** DONE Day 11
   CLOSED: [2021-09-29 Wed 14:59]
   - couple of char functions ~ord~, ~chr~.
   - good use of ~until~
   - could have improved ~double2s~ for checking that at least 2 unique items exist in a list 

** DONE Day 12
   CLOSED: [2021-10-02 Sat 18:04]
   I first thought of using regex's to match and extract all numbers in a given string. While I was searching for haskell regex libraries, I can just as easily be done using parser combinators.
   So let me see how this goes.
   Hmm, I wrote a integer scanner from the ground up.
   Now for the second part, I might as well use a JSON library. Does the problem setter expect a ad-hoc JSON parser to be written?
   <2021-10-02 Sat> I am now using *aeson* for reading the JSON file.
   - Data.HashMap, ByteString, Data.Text
   - Data.Scientific, Data.Aeson
   Used a few external packages 

** DONE Day 13
   CLOSED: [2021-10-02 Sat 10:19]
   Brute force enumeration of permutations followed by scoring each.
   - circular pairings part is a bit messy
   - used ~concatMap~ a couple of times

** DONE Day 14
   CLOSED: [2021-10-04 Mon 10:19]
   - I should start using ~Map~ data structures rather than working with key-value lists.
   - All calculations need the read-only input data, so I will try out ~Reader~ monad and finally see how it works out.
   - Wanted to use ~StateT~ with ~Reader Data~ to change the scores at each moment in time, but felt it was too trivial a use and abandoned it.
   - Good use of ~HashMap~ through out the problem.
   - Should I have made ~scoreAt~ tail recursive?
     
** DONE Day 15
   CLOSED: [2021-10-04 Mon 19:31]
   - Full brute force search of possible recipes
   - I might be using ~Reader~ a bit too much, but atleast I am getting used to it
     + Same with ~ReadP~ parsing too.
   - Finally found a good use for list comprehensions
   - Using five different parameters for the ~P~ (properties) data structure might have been a bit cumbersome. I could have gotten away with ~(Int, [Int])~ the first ~Int~ for calories and the rest 4 into the list. This would have simplified ~addP~, ~weigh~.
     
** DONE Day 16
   CLOSED: [2021-10-05 Tue 16:48]
   - lots of poor decisions that I still stuck through as they offered a good learning opportunity.
     + used ~Obj~ instead of just using the strings themselves
       * So this lead to importing ~Data.Hashable~
       * And whole case enumeration for ~ReadP Obj~
       
<2021-10-05 Tue> What the hell is going on with that hashmap filter? If I check ~>=~ then we have a match in the results, but ~==~ is not giving me a match.
   - This was a pretty stupid mistake. I very explicitly defined ~isSubset~ with inputs named ~small~ and ~big~ so it wont be confusing. And then went at used it in reverse.
   - That wording *greater than* and *less than* used in part2 was confusing. I am still not sure how it was meant. I flipped them to get a single output and that was the correct answer.

** DONE Day 17
   CLOSED: [2021-10-05 Tue 19:08]
   Pretty anti-climatic for a day 17 question. The only non-trivial thing is the ~combinations~ function. The rest is just ~filter~'s and ~map~'s.
   
** DONE Day 18
   CLOSED: [2021-10-06 Wed 19:29]
   Seems like the standard Conway's Game of Life.
   - +Finally a problem where I can use ~State~ monad non-trivially.+
     + Using simple (state -> state) functions are still better here. I think this is mostly due to the fact that GoL problems change state all at once rather than during an iteration.
   - Got some more practice with ~Data.Array~. Still did not need any faster state, or mutable versions of arrays.
   - Got stuck a bit on a bug due to my confusion of the return value of ~bounds~ of an array.

** TODO Day 19
   Some kind of look ahead scanning. Regexps do this kind of thing very well. Should I try to create a ad-hoc scanner myself for this problem? Something that suites this problem should be small enough, so I will give it a go before jumping to parsers and regex engines.
   - Decided using parser combinators is the better option. I made a good use of ~ReadP~ combinators here.

  Part2 looks a bit complicated. I should properly work through the example before jumping into implementation.
